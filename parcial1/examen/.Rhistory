exi
setwd("/home/jose/Escritorio/Semestre 6/Mineria de datos/portafolioJairo/parcial1/examen")
df <- read.csv("Ejercicio 1.csv", sep = ",")
#Trasponer las columnas del df para que las características de cada observacion estén ordenadas por columnas
df_transposed <- as.data.frame(t(as.matrix(df)))
# Eliminar observaciones con valores NA
df_transposed_omitted<-na.omit(df_transposed)
# Colocar nombre a las columnas y eliminar la primera fila
names(df_transposed_omitted) <- c("Peso","Estatura","Edad","Complexión","Papás_separados","Cantidad_hermanos",
"Trabaja", "Horas_trab_dia", "Horas_trab_mes", "Salario_mes")
updated_data <- df_transposed_omitted[-c(1),]
library(janitor)
frecuency_as_df<-as.data.frame(tabyl(updated_data$Peso, sort = TRUE))
#frecuency_as_df
#weight_frecuency <- frecuency_as_df[-c(1),]
names(frecuency_as_df) <- c("Peso","Frecuencia","Porcentaje")
frecuency_as_df
View(frecuency_as_df)
View(df_transposed_omitted)
View(updated_data)
View(updated_data)
final_weight_frecuency<-frecuency_as_df[-c(51),]
View(final_weight_frecuency)
frecuency_as_df<-as.data.frame(tabyl(updated_data$Estatura, sort = TRUE))
names(frecuency_as_df) <- c("Estatura","Frecuencia","Porcentaje")
final_height_frecuency<-frecuency_as_df[-c(51),]
View(final_height_frecuency)
View(final_weight_frecuency)
frecuency_as_df<-as.data.frame(tabyl(updated_data$Edad, sort = TRUE))
names(frecuency_as_df) <- c("Edad","Frecuencia","Porcentaje")
final_age_frecuency<-frecuency_as_df[-c(51),]
View(final_age_frecuency)
frecuency_as_df<-as.data.frame(tabyl(updated_data$Complexión, sort = TRUE))
names(frecuency_as_df) <- c("Complexion","Frecuencia","Porcentaje")
final_height_frecuency<-frecuency_as_df[-c(51),]
frecuency_as_df<-as.data.frame(tabyl(updated_data$Complexión, sort = TRUE))
names(frecuency_as_df) <- c("Complexion","Frecuencia","Porcentaje")
final_constitution_frecuency<-frecuency_as_df[-c(51),]
View(final_constitution_frecuency)
final_constitution_frecuency<-frecuency_as_df[-c(1),]
View(final_constitution_frecuency)
frecuency_as_df<-as.data.frame(tabyl(updated_data$Papás_separados, sort = TRUE))
names(frecuency_as_df) <- c("Papás_separados","Frecuencia","Porcentaje")
final_height_frecuency<-frecuency_as_df[-c(51),]
frecuency_as_df<-as.data.frame(tabyl(updated_data$Papás_separados, sort = TRUE))
names(frecuency_as_df) <- c("Papás_separados","Frecuencia","Porcentaje")
final_separated_parents_frecuency<-frecuency_as_df[-c(51),]
View(final_separated_parents_frecuency)
final_separated_parents_frecuency<-frecuency_as_df[-c(2),]
View(final_separated_parents_frecuency)
frecuency_as_df<-as.data.frame(tabyl(updated_data$Cantidad_hermanos, sort = TRUE))
names(frecuency_as_df) <- c("Cantidad_hermanos","Frecuencia","Porcentaje")
final_number_of_brothers_frecuency<-frecuency_as_df[-c(51),]
View(final_number_of_brothers_frecuency)
final_number_of_brothers_frecuency<-frecuency_as_df[-c(7),]
View(final_number_of_brothers_frecuency)
frecuency_as_df<-as.data.frame(tabyl(updated_data$Trabaja, sort = TRUE))
names(frecuency_as_df) <- c("Trabaja","Frecuencia","Porcentaje")
final_height_frecuency<-frecuency_as_df[-c(51),]
frecuency_as_df<-as.data.frame(tabyl(updated_data$Trabaja, sort = TRUE))
names(frecuency_as_df) <- c("Trabaja","Frecuencia","Porcentaje")
final_iswork_frecuency<-frecuency_as_df[-c(51),]
View(final_iswork_frecuency)
final_iswork_frecuency<-frecuency_as_df[-c(3),]
View(final_iswork_frecuency)
frecuency_as_df<-as.data.frame(tabyl(updated_data$Horas_trab_dia, sort = TRUE))
names(frecuency_as_df) <- c("Horas_trabajo x dia","Frecuencia","Porcentaje")
final_worktime_per_day_frecuency<-frecuency_as_df[-c(51),]
View(final_worktime_per_day_frecuency)
final_worktime_per_day_frecuency<-frecuency_as_df[-c(8),]
View(final_worktime_per_day_frecuency)
frecuency_as_df<-as.data.frame(tabyl(updated_data$Horas_trab_mes, sort = TRUE))
names(frecuency_as_df) <- c("Horas_trabajo x mes","Frecuencia","Porcentaje")
final_worktime_per_month_frecuency<-frecuency_as_df[-c(51),]
View(final_worktime_per_month_frecuency)
frecuency_as_df<-as.data.frame(tabyl(updated_data$Horas_trab_mes, sort = TRUE))
names(frecuency_as_df) <- c("Horas_trabajo x mes","Frecuencia","Porcentaje")
final_worktime_per_month_frecuency<-frecuency_as_df[-c(10),]
View(final_worktime_per_month_frecuency)
frecuency_as_df<-as.data.frame(tabyl(updated_data$Salario_mes, sort = TRUE))
names(frecuency_as_df) <- c("Salario x mes","Frecuencia","Porcentaje")
final_salary_per_month_frecuency<-frecuency_as_df[-c(51),]
View(final_salary_per_month_frecuency)
final_salary_per_month_frecuency<-frecuency_as_df[-c(24),]
View(final_salary_per_month_frecuency)
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("factoextra")
install.packages("ggplot2")
install.packages("cowplot")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
# Número de personas por categoría
cantidad_personas <- c(sum(with(datos, Edad < 18.0)),
sum(with(datos, Edad >=18.0 & Edad<=25.0)),
sum(with(datos, Edad > 25.0)))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(cowplot)
library(dplyr)
library(grid)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(ggpubr)
library(scatterplot3d)
library(reshape2)
library(knitr)
library(MVN)
library(biotools)
library(klaR)
library(janitor)
library(psych)
library(gridExtra)
library(GGally)
library(funModeling)
library(CCA)
library(vegan)
library(fields)
df <- read.csv("Ejercicio 1.1.csv", sep = ",")
df
#Trasponer las columnas del df para que las características de cada observacion estén ordenadas por columnas
df_transposed <- as.data.frame(t(as.matrix(df)))
# Colocar nombre a las columnas y eliminar la primera fila
names(df_transposed) <- c("Peso","Estatura","Edad","Complexion","Papas_separados","Cantidad_hermanos",
"Trabaja", "Horas_trab_dia", "Horas_trab_mes", "Salario_mes")
datos <- df_transposed[-c(1),]
# Reemplazar valores NA con 0 solo en las columnas seleccionadas
vars_to_replace=c("Horas_trab_dia", "Horas_trab_mes", "Salario_mes")
datos = datos %>% mutate_at(.vars=vars_to_replace, .funs = funs(ifelse(is.na(.), 0, .)))
datos
# Analizar la base de datos
df_status(datos)
# Convertir en valores númericos aquellos almacenados en las columnas seleccionadas
vars_to_replace=c("Peso", "Estatura", "Edad", "Cantidad_hermanos")
datos[vars_to_replace] <- lapply(datos[vars_to_replace], function(x) as.numeric(as.character(x)))
# Cargamos csv con los valores previamente almacenados en los campos Horas_trab_dia, Horas_trab_mes y Salario_mes
df2 <- read.csv("Ejercicio 1.csv", sep = ",")
#Trasponer las columnas del df para que las características de cada observacion estén ordenadas por columnas
df2 <- as.data.frame(t(as.matrix(df2)))
# Colocar nombre a las columnas y eliminar la primera fila
names(df2) <- c("Peso","Estatura","Edad","Complexion","Papas_separados","Cantidad_hermanos",
"Trabaja", "Horas_trab_dia", "Horas_trab_mes", "Salario_mes")
df2 <- df2[-c(1),]
datos$Horas_trab_dia <- as.numeric(as.numeric_version(df2$Horas_trab_dia))
datos$Horas_trab_mes <- as.numeric(as.numeric_version(df2$Horas_trab_mes))
datos$Salario_mes <- as.numeric(as.numeric_version(df2$Salario_mes))
status(datos)
datos['Edad'] <- floor(datos['Edad'])
#Tabla de frecuencias de complexion
frequency_as_df<-as.data.frame(tabyl(datos$Complexion, sort = TRUE))
names(frequency_as_df) <- c("Complexion","Frecuencia","Porcentaje")
final_constitution_frequency<-frequency_as_df[-c(1),]
final_constitution_frequency
#Tabla de frecuencias de papás_separados
frequency_as_df<-as.data.frame(tabyl(datos$Papas_separados, sort = TRUE))
names(frequency_as_df) <- c("Papás_separados","Frecuencia","Porcentaje")
final_separated_parents_frequency<-frequency_as_df[-c(2),]
final_separated_parents_frequency
#Tabla de frecuencias de cantidad_hermanos
frequency_as_df<-as.data.frame(tabyl(datos$Cantidad_hermanos, sort = TRUE))
names(frequency_as_df) <- c("Cantidad_hermanos","Frecuencia","Porcentaje")
final_siblings_frequency<-frequency_as_df[-c(7),]
final_siblings_frequency
#Tabla de frecuencias de los que trabajan
frequency_as_df<-as.data.frame(tabyl(datos$Trabaja, sort = TRUE))
names(frequency_as_df) <- c("Trabaja","Frecuencia","Porcentaje")
final_iswork_frequency<-frequency_as_df[-c(3),]
final_iswork_frequency
#Filtro de las observaciones que SI trabajan
trabajan <- filter(datos, Trabaja == "SI")
#Tabla de frecuencias de horas trabajadas x dia
frequency_as_df<-as.data.frame(tabyl(trabajan$Horas_trab_dia, sort = TRUE))
names(frequency_as_df) <- c("Horas_trabajo x dia","Frecuencia","Porcentaje")
frequency_as_df
summary(datos$Peso)
sd(datos$Peso)
summary(datos$Estatura)
sd(datos$Estatura)
summary(datos$Edad)
sd(datos$Edad)
summary(trabajan$Horas_trab_mes)
sd(trabajan$Horas_trab_mes)
summary(trabajan$Salario_mes)
sd(trabajan$Salario_mes)
numericas <- datos %>% dplyr::select(Peso, Estatura, Edad,Horas_trab_dia,
Horas_trab_mes, Salario_mes)
ggpairs(numericas, title = "Variables numéricas dependientes")
# Número de personas por categoría
cantidad_personas <- c(sum(with(datos, Edad < 18.0)),
sum(with(datos, Edad >=18.0 & Edad<=25.0)),
sum(with(datos, Edad > 25.0)))
dist_personas <- data.frame(Categoria=c("Junior", "Señor", "Mayor"), Cantidad=cantidad_personas)
ggplot(dist_personas, aes(x=Categoria, y=Cantidad)) + geom_bar(stat = "identity",fill=Categoria) + coord_flip() + labs(title="Distribución de personas por categoría") +
geom_text(aes(y=Cantidad, label=cantidad_personas), vjust=1.5, color="white", size=3.5, hjust="right")
# Número de personas por categoría
cantidad_personas <- c(sum(with(datos, Edad < 18.0)),
sum(with(datos, Edad >=18.0 & Edad<=25.0)),
sum(with(datos, Edad > 25.0)))
dist_personas <- data.frame(Categoria=c("Junior", "Señor", "Mayor"), Cantidad=cantidad_personas)
ggplot(dist_personas, aes(x=Categoria, y=Cantidad)) + geom_bar(stat = "identity",fill=Categoria) + coord_flip() + labs(title="Distribución de personas por categoría") +
geom_text(aes(y=Cantidad, label=cantidad_personas), vjust=1.5, color="white", size=3.5, hjust="right")
# Número de personas por categoría
cantidad_personas <- c(sum(with(datos, Edad < 18.0)),
sum(with(datos, Edad >=18.0 & Edad<=25.0)),
sum(with(datos, Edad > 25.0)))
dist_personas <- data.frame(Categoria=c("Junior", "Señor", "Mayor"), Cantidad=cantidad_personas)
ggplot(dist_personas, aes(x=Categoria, y=Cantidad)) + geom_bar(stat = "identity",fill=dist_personas) + coord_flip() + labs(title="Distribución de personas por categoría") +
geom_text(aes(y=Cantidad, label=cantidad_personas), vjust=1.5, color="white", size=3.5, hjust="right")
# Número de personas por categoría
cantidad_personas <- c(sum(with(datos, Edad < 18.0)),
sum(with(datos, Edad >=18.0 & Edad<=25.0)),
sum(with(datos, Edad > 25.0)))
dist_personas <- data.frame(Categoria=c("Junior", "Señor", "Mayor"), Cantidad=cantidad_personas)
ggplot(dist_personas, aes(x=Categoria, y=Cantidad)) + geom_bar(stat = "identity",fill=c("r", "b", "g")) + coord_flip() + labs(title="Distribución de personas por categoría") +
geom_text(aes(y=Cantidad, label=cantidad_personas), vjust=1.5, color="white", size=3.5, hjust="right")
# Número de personas por categoría
cantidad_personas <- c(sum(with(datos, Edad < 18.0)),
sum(with(datos, Edad >=18.0 & Edad<=25.0)),
sum(with(datos, Edad > 25.0)))
dist_personas <- data.frame(Categoria=c("Junior", "Señor", "Mayor"), Cantidad=cantidad_personas)
ggplot(dist_personas, aes(x=Categoria, y=Cantidad)) + geom_bar(stat = "identity") + coord_flip() + labs(title="Distribución de personas por categoría") +
geom_text(aes(y=Cantidad, label=cantidad_personas), vjust=1.5, color="white", size=3.5, hjust="right")
# Número de personas por categoría
cantidad_personas <- c(sum(with(datos, Edad < 18.0)),
sum(with(datos, Edad >=18.0 & Edad<=25.0)),
sum(with(datos, Edad > 25.0)))
dist_personas <- data.frame(Categoria=c("Junior", "Señor", "Mayor"), Cantidad=cantidad_personas)
ggplot(dist_personas, aes(x=Categoria, y=Cantidad),fill=Categoria) + geom_bar(stat = "identity") + coord_flip() + labs(title="Distribución de personas por categoría") +
geom_text(aes(y=Cantidad, label=cantidad_personas), vjust=1.5, color="white", size=3.5, hjust="right")
# Número de personas por categoría
cantidad_personas <- c(sum(with(datos, Edad < 18.0)),
sum(with(datos, Edad >=18.0 & Edad<=25.0)),
sum(with(datos, Edad > 25.0)))
dist_personas <- data.frame(Categoria=c("Junior", "Señor", "Mayor"), Cantidad=cantidad_personas)
ggplot(dist_personas, aes(x=Categoria, y=Cantidad),fill=dist_personas) + geom_bar(stat = "identity") + coord_flip() + labs(title="Distribución de personas por categoría") +
geom_text(aes(y=Cantidad, label=cantidad_personas), vjust=1.5, color="white", size=3.5, hjust="right")
# Número de personas por categoría
cantidad_personas <- c(sum(with(datos, Edad < 18.0)),
sum(with(datos, Edad >=18.0 & Edad<=25.0)),
sum(with(datos, Edad > 25.0)))
dist_personas <- data.frame(Categoria=c("Junior", "Señor", "Mayor"), Cantidad=cantidad_personas)
ggplot(dist_personas, aes(x=Categoria, y=Cantidad),fill=c("red","blue","green")) + geom_bar(stat = "identity") + coord_flip() + labs(title="Distribución de personas por categoría") +
geom_text(aes(y=Cantidad, label=cantidad_personas), vjust=1.5, color="white", size=3.5, hjust="right")
# Número de personas por categoría
cantidad_personas <- c(sum(with(datos, Edad < 18.0)),
sum(with(datos, Edad >=18.0 & Edad<=25.0)),
sum(with(datos, Edad > 25.0)))
dist_personas <- data.frame(Categoria=c("Junior", "Señor", "Mayor"), Cantidad=cantidad_personas)
ggplot(dist_personas, aes(x=Categoria, y=Cantidad),fill=rainbow(3)) + geom_bar(stat = "identity") + coord_flip() + labs(title="Distribución de personas por categoría") +
geom_text(aes(y=Cantidad, label=cantidad_personas), vjust=1.5, color="white", size=3.5, hjust="right")
# Número de personas por categoría
cantidad_personas <- c(sum(with(datos, Edad < 18.0)),
sum(with(datos, Edad >=18.0 & Edad<=25.0)),
sum(with(datos, Edad > 25.0)))
dist_personas <- data.frame(Categoria=c("Junior", "Señor", "Mayor"), Cantidad=cantidad_personas)
ggplot(dist_personas, aes(x=Categoria, y=Cantidad)) + geom_bar(stat = "identity",fill=rainbow(3)) + coord_flip() + labs(title="Distribución de personas por categoría") +
geom_text(aes(y=Cantidad, label=cantidad_personas), vjust=1.5, color="white", size=3.5, hjust="right")
